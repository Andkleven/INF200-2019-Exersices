# -*- coding: utf-8 -*-

"""
An object-oriented implementation of a Snakes & Ladders simulator.
"""

__author__ = 'Anders Mathiesen, Kristian Kram√•s'
__email__ = 'andermat@nmbu.no, kristiakr@nmbu.no'


import random


class Board:
    def __init__(self, ladders=[(1, 39), (8, 2), (36, 16), (43, 19), (49, 30), (65, 17), (68, 14)], chutes=[(24, 19), (33, 30), (42, 12), (56, 19), (64, 37), (74, 62), (87, 17)], goal=90):
        self.ladders = ladders
        self.chutes = chutes
        self.goal = goal

    def goal_reached(self, current_pos):
        return current_pos <= self.goal

    def position_adjustment(self, current_pos):
        for ladder in self.ladders:
            if ladder[0] == current_pos:
               return ladder[1]
        for chute in self.chutes:
            if chute[0] == current_pos:
               return chute[1]*-1
        return 0


class Player:
    def __init__(self, board):
        self.board = board
        self.position

    def move(self):
        self.position += random.randint(1, 6)
        self.position += self.board.position_adjustment(self.position)


class ResilientPlayer(Player):
    def __init__(self):
        super().__init__()


class LazyPlayer(Player):
    def __init__(self):
        super().__init__()


class Simulation(players, randomize_players):
    def __init__(self):
        """
        Initialise the simulation

        Arguments
        ---------

        """
        pass

    def single_game(self):
        """
        Run a single game

        Returns
        ---------
        int : moves
            Number of moves made
        str : winner_type
            The type of the winner
        """
        pass

    def run_simulation(self, games):
        """
        Runs a given number of games and stores the results in the Simulation
        object.
        """

    def get_results(self):
        """
        Returns all results generated by run_simulation(),
        calls so far as a list of result tuples, e.g.
        [(10, 'Player'), (6, 'ResilientPlayer')].

        Returns
        -------
        int : moves
            Number of moves made
        str : winner_type
            The type of the winner
        """
        pass

    def winners_per_type(self):
        """
        Returns a dictionary mapping player types to the number of wins, e.g.,
        {'Player': 4, 'LazyPlayer': 2, 'ResilientPlayer': 5}

        Returns
        -------
        dict : winners_per_type
            Dictionary mapping player types to the number of wins
        """
        pass

    def durations_per_type(self):
        """
        Returns a dictionary mapping player types to lists of game durations
        for that type, e.g.,
        {'Player': [11, 25, 13],
        'LazyPlayer': [39],
        'ResilientPlayer': [8, 7, 6, 11]}

        Returns
        -------
        dict : durations_per_type
            Dictionary mapping player types to lists of game durations
            for that type
        """
        pass

    def players_per_type(self):
        """
        Returns a dictionary showing how many players of each type
        participate, e.g.,
        {'Player': 3, 'LazyPlayer': 1, 'ResilientPlayer': 0}

        Returns
        -------
        dict : players_per_type
            Dictionary showing how many players of each type
        """
        pass


if __name__ == "__main__":
    pass
